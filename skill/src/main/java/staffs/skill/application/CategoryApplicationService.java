package staffs.skill.application;


import com.fasterxml.jackson.core.JsonProcessingException;
import example.common.domain.Identity;
import example.common.domain.UniqueIDFactory;

import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import staffs.skill.api.BaseCategory;
import staffs.skill.api.CreateCategoryCommand;
import staffs.skill.domain.Category;
import staffs.skill.infrastructure.CategoryRepository;

import java.util.Objects;
import java.util.Optional;

@Service
@AllArgsConstructor
public class CategoryApplicationService {
    private final CategoryRepository categoryRepository;
    private final Environment env;
    private final RabbitTemplate sender;
    private final Logger LOG = LoggerFactory.getLogger(getClass());

    // Create a new category
    public String createCategory(CreateCategoryCommand command) throws CategoryDomainException {
        try {
            Identity idOfNewCategory = UniqueIDFactory.createID();

            Category category = Category.categoryOf(idOfNewCategory, command.getCategoryName());

            BaseCategory categoryEntity = categoryRepository.save(CategoryDomainToInfrastructureConvertor.convert(category));

            category = CategoryInfrastructureToDomainConvertor.convert(categoryEntity);

            publishNewCategoryEvent(category);

            return category.id().toString();
        } catch (IllegalArgumentException e) {
            throw new CategoryDomainException(e.getMessage());
        }
    }

    public String updateCategory(String categoryId, CreateCategoryCommand command) throws CategoryDomainException {
        try {
            BaseCategory existingCategoryEntity = (BaseCategory) categoryRepository.findById(categoryId)
                    .orElseThrow(() -> new CategoryDomainException("Category not found"));

            Category existingCategory = CategoryInfrastructureToDomainConvertor.convert(existingCategoryEntity);

            existingCategory.updatedCategory(command.getCategoryName());

            BaseCategory updatedCategoryEntity = categoryRepository.save(CategoryDomainToInfrastructureConvertor.convert(existingCategory));

            return updatedCategoryEntity.getId().toString();
        } catch (IllegalArgumentException e) {
            throw new CategoryDomainException(e.getMessage());
        }
    }

    private void publishNewCategoryEvent(Category category) throws CategoryDomainException {
        if (category.getEvent().isEmpty()) {
            throw new CategoryDomainException("New Category Event not generated by domain");
        }
        try {
            sender.convertAndSend(
                    Objects.requireNonNull(env.getProperty("rabbitmq.exchange")),
                    Objects.requireNonNull(env.getProperty("rabbitmq.newCategoryKey")),
                    category.getEvent().get().toJson()
            );
        } catch (JsonProcessingException e) {
            LOG.error(e.getMessage());
        }
    }

    public void removeCategory(String categoryId) throws CategoryDomainException {
        Optional<Category> category = categoryRepository.findById(categoryId);
        if (category.isPresent()) {
            categoryRepository.deleteById(categoryId);
        } else {
            throw new CategoryDomainException("Category not found");
        }
    }
}
