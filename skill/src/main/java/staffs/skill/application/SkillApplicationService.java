package staffs.skill.application;

import com.fasterxml.jackson.core.JsonProcessingException;
import example.common.domain.AggregateEvent;
import example.common.domain.Identity;
import example.common.domain.UniqueIDFactory;
import staffs.skill.api.BaseSkill;
import staffs.skill.api.CreateSkillCommand;
import staffs.skill.domain.Skill;
import staffs.skill.domain.SkillDetail;
import staffs.skill.infrastructure.SkillRepository;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class SkillApplicationService {
    private final SkillRepository skillRepository;
    private final Environment env;
    private final RabbitTemplate sender;
    private final Logger LOG = LoggerFactory.getLogger(getClass());

    public String createSkillWithDetails(CreateSkillCommand command) throws SkillDomainException {
        try {
            Identity idOfNewSkill = UniqueIDFactory.createID();

            // Convert skill details from the command to a list of SkillDetail objects
            List<SkillDetail> skillDetails = command.getSkillDetail().stream()
                    .map(skillDetail -> new SkillDetail(
                            skillDetail.id(),
                            skillDetail.name(),
                            skillDetail.proficiencyLevel()
                    ))
                    .collect(Collectors.toList());

            // Create the Skill aggregate
            Skill skill = Skill.skillOf(idOfNewSkill,
                    command.getSkillName(),
                    command.getCategory(),
                    skillDetails);

            // Convert the aggregate to the infrastructure entity and save it
            BaseSkill skillEntity = skillRepository.save(SkillDomainToInfrastructureConvertor.convert(skill));

            // Convert back to the domain object to generate events if needed
            skill = SkillInfrastructureToDomainConvertor.convert(skillEntity);

            publishNewSkillEvent(skill); // Notify any subscribers

            // Return the ID back to the controller
            return skill.id().toString();
        } catch (IllegalArgumentException e) {
            throw new SkillDomainException(e.getMessage());
        }
    }

    private void publishNewSkillEvent(Skill skill) throws SkillDomainException {
        if (skill.getEvent().isEmpty()) {
            throw new SkillDomainException("New Skill Event not generated by domain");
        }
        try {
            // Send the event using the exchange and routing key
            sender.convertAndSend(
                    Objects.requireNonNull(env.getProperty("rabbitmq.exchange")),
                    Objects.requireNonNull(env.getProperty("rabbitmq.newSkillKey")),
                    skill.getEvent().get().toJson()
            );

            // Consider saving to a local event store DB here as well
        } catch (JsonProcessingException e) {
            LOG.error(e.getMessage());
        }
    }
}
