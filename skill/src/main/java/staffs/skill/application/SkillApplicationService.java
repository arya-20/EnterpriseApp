package staffs.skill.application;

import com.fasterxml.jackson.core.JsonProcessingException;
import example.common.domain.Identity;
import example.common.domain.UniqueIDFactory;
import staffs.skill.api.BaseSkill;
import staffs.skill.api.BaseSkillDetail;
import staffs.skill.api.CreateSkillCommand;
import staffs.skill.domain.Skill;
import staffs.skill.domain.SkillDetail;
import staffs.skill.infrastructure.SkillRepository;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class SkillApplicationService {
    private final SkillRepository skillRepository;
    private final Environment env;
    private final RabbitTemplate sender;
    private final Logger LOG = LoggerFactory.getLogger(getClass());

    public String createSkillWithDetails(CreateSkillCommand command) throws SkillDomainException {
        try {
            Identity idOfNewSkill = UniqueIDFactory.createID();

            List<SkillDetail> skillDetails = command.getSkillDetails().stream()
                    .map(skillDetail -> new SkillDetail(
                            skillDetail.id(),
                            skillDetail.name(),
                            skillDetail.proficiencyLevel()
                    ))
                    .collect(Collectors.toList());

            Skill skill = Skill.skillOf(idOfNewSkill,
                    command.getSkillName(),
                    command.getSkillCategory(),
                    skillDetails);

            BaseSkill skillEntity = skillRepository.save(SkillDomainToInfrastructureConvertor.convert(skill));
            skill = SkillInfrastructureToDomainConvertor.convert(skillEntity);
            publishNewSkillEvent(skill);

            return skill.id().toString();
        } catch (IllegalArgumentException e) {
            throw new SkillDomainException(e.getMessage());
        }
    }

    public String updateSkillWithDetails(String skillId, CreateSkillCommand command) throws SkillDomainException {
        try {
            BaseSkill existingSkillEntity = skillRepository.findById(skillId)
                    .orElseThrow(() -> new SkillDomainException("Skill not found"));

            Skill existingSkill = SkillInfrastructureToDomainConvertor.convert(existingSkillEntity);

            List<SkillDetail> updatedSkillDetails = command.getSkillDetails().stream()
                    .map(skillDetail -> new SkillDetail(
                            skillDetail.id(),
                            skillDetail.name(),
                            skillDetail.proficiencyLevel()
                    ))
                    .collect(Collectors.toList());

            existingSkill.updateDetails(command.getSkillName(), command.getSkillCategory(), updatedSkillDetails);

            BaseSkill updatedSkillEntity = skillRepository.save(SkillDomainToInfrastructureConvertor.convert(existingSkill));

            return updatedSkillEntity.getId().toString();
        } catch (IllegalArgumentException e) {
            throw new SkillDomainException(e.getMessage());
        }
    }


    void publishNewSkillEvent(Skill skill) throws SkillDomainException {
        if (skill.getEvent().isEmpty()) {
            throw new SkillDomainException("New Skill Event not generated by domain");
        }
        try {
            sender.convertAndSend(
                    Objects.requireNonNull(env.getProperty("rabbitmq.exchange")),
                    Objects.requireNonNull(env.getProperty("rabbitmq.newSkillKey")),
                    skill.getEvent().get().toJson()
            );

        } catch (JsonProcessingException e) {
            LOG.error(e.getMessage());
        }
    }

    public void removeSkill(String skillId) throws SkillDomainException {
        Optional<staffs.skill.infrastructure.Skill> skill = skillRepository.findById(skillId);
        if (skill.isPresent()) {
            skillRepository.deleteById(skillId);
        } else {
            throw new SkillDomainException("Skill not found");
        }
    }

}
